import { Component, inject, Signal, signal, effect } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../services/auth.service';
import { ChatService } from './chat.services';

interface User {
  uid: string;
  username: string;
}

@Component({
  selector: 'app-chat',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css'],
})
export class ChatComponent {
  private chatService = inject(ChatService);
  private authService = inject(AuthService);

  users = signal<User[]>([]);
  currentUser = signal<User | null>(null);
  selectedChatId = signal<string | null>(null);
  selectedChatUser = signal<string>('');
  newMessage = signal<string>('');
  messages = signal<any[]>([]); // ØªØ­Ø¯ÙŠØ« ÙƒÙˆØ¯ Ø§Ù„Ø±Ø³Ø§Ø¦Ù„ Ù„ÙŠØ³ØªØ®Ø¯Ù… Signal Ø¨Ø¯Ù„Ø§Ù‹ Ù…Ù† Observable

  constructor() {
    // ðŸŸ¢ Ù…Ø±Ø§Ù‚Ø¨Ø© Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù… Ø§Ù„Ø­Ø§Ù„ÙŠ ÙˆØªØ­Ø¯ÙŠØ«Ù‡ ØªÙ„Ù‚Ø§Ø¦ÙŠÙ‹Ø§
    effect(() => {
      this.authService.getCurrentUser().subscribe(user => {
        if (user) {
          this.currentUser.set({ uid: user.uid, username: user.displayName || 'Unknown' });
        }
      });
    });

    // ðŸŸ¢ Ø¬Ù„Ø¨ Ù‚Ø§Ø¦Ù…Ø© Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…ÙŠÙ† ÙˆØªØ­Ø¯ÙŠØ«Ù‡Ø§ ØªÙ„Ù‚Ø§Ø¦ÙŠÙ‹Ø§
    effect(() => {
      this.chatService.getUsers().subscribe(users => {
        this.users.set(users);
      });
    });

    // ðŸŸ¢ ØªØ­Ø¯ÙŠØ« Ø§Ù„Ø±Ø³Ø§Ø¦Ù„ Ø¹Ù†Ø¯ ØªØºÙŠÙŠØ± Ø§Ù„Ø´Ø§Øª Ø§Ù„Ù…Ø­Ø¯Ø¯
    effect(() => {
      const chatId = this.selectedChatId();
      if (chatId) {
        this.chatService.getMessages(chatId).subscribe(messages => {
          this.messages.set(messages);
        });
      }
    });
  }

  async startChat(userId: string, username: string) {
    const currentUser = this.currentUser();
    if (!currentUser?.uid || this.selectedChatId() === userId) return; // ØªØ¬Ù†Ø¨ Ø¥Ø¹Ø§Ø¯Ø© ØªØ­Ù…ÙŠÙ„ Ø§Ù„Ø´Ø§Øª Ø¥Ø°Ø§ Ù„Ù… ÙŠØªØºÙŠØ±

    const chatId = await this.chatService.getChatId(currentUser.uid, userId);
    this.selectedChatId.set(chatId);
    this.selectedChatUser.set(username);
  }

  sendMessage() {
    const currentUser = this.currentUser();
    const messageText = this.newMessage().trim();

    if (!messageText || !this.selectedChatId() || !currentUser?.uid) return;

    this.chatService.sendMessage(this.selectedChatId()!, currentUser.uid, messageText);
    this.newMessage.set('');
  }

  updateMessage(event: Event) {
    this.newMessage.set((event.target as HTMLInputElement).value);
  }
}
